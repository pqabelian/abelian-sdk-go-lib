syntax = "proto3";
package core;

option go_package = "abelian.info/sdk/proto";
option java_package = "info.abelian.sdk.proto";

message TxInDescMessage {
    bytes script = 1;
    int64 value = 2;
    bytes shortAbelAddress = 3;
    int64 height = 4;
    bytes txid = 5;
    int32 index = 6;
}

message TxOutDescMessage {
    bytes abelAddress = 1;
    int64 value = 2;
}

message BlockDescMessage {
    bytes binData = 1;
    int64 height = 2;
}

message GenerateSafeCryptoSeedArgs {}

message GenerateSafeCryptoSeedResult {
    bytes cryptoSeed = 1;
}

message GenerateCryptoKeysAndAddressArgs {
    bytes cryptoSeed = 1;
}

message GenerateCryptoKeysAndAddressResult {
    bytes spendSecretKey = 1;
    bytes serialNoSecretKey = 2;
    bytes viewSecretKey = 3;
    bytes cryptoAddress = 4;
}

message GetAbelAddressFromCryptoAddressArgs {
    bytes cryptoAddress = 1;
    int32 chainID = 2;
}

message GetAbelAddressFromCryptoAddressResult {
    bytes abelAddress = 1;
}

message GetCryptoAddressFromAbelAddressArgs {
    bytes abelAddress = 1;
}

message GetCryptoAddressFromAbelAddressResult {
    bytes cryptoAddress = 1;
}

message GetShortAbelAddressFromAbelAddressArgs {
    bytes abelAddress = 1;
}

message GetShortAbelAddressFromAbelAddressResult {
    bytes shortAbelAddress = 1;
}

message DecodeFingerprintFromTxVoutScriptArgs {
    bytes txVoutScript = 1;
}

message DecodeFingerprintFromTxVoutScriptResult {
    bytes fingerprint = 1;
}

message DecodeCoinValueFromTxVoutScriptArgs {
    bytes txVoutScript = 1;
    bytes viewSecretKey = 2;
}

message DecodeCoinValueFromTxVoutScriptResult {
    int64 coinValue = 1;
}

message GenerateUnsignedRawTxDataArgs {
    repeated TxInDescMessage txInDescs = 1;
    repeated TxOutDescMessage txOutDescs = 2;
    repeated BlockDescMessage txRingBlockDescs = 3;
    int64 txFee = 4;
}

message GenerateUnsignedRawTxDataResult {
    bytes data = 1;
    repeated bytes signerShortAddresses = 2;
}

message GenerateSignedRawTxDataArgs {
    bytes unsignedRawTxData = 1;
    repeated bytes signerShortAddresses = 2;
    repeated bytes signerCryptoSeeds = 3;
}

message GenerateSignedRawTxDataResult {
    bytes data = 1;
    bytes txid = 2;
}

message GenerateCoinSerialNumberArgs {
    bytes txid = 1;
    int32 index = 2;
    bytes serialNoSecretKey = 3;
    repeated BlockDescMessage ringBlockDescs = 4;
}

message GenerateCoinSerialNumberResult {
    bytes serialNumber = 1;
}